CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL CHECK (TRIM(name) <> ''),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
CREATE TABLE exercises (
    exercise_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(255) NOT NULL,
    difficulty VARCHAR(50) NOT NULL
);

CREATE TABLE submissions_history (
    ID SERIAL PRIMARY KEY,
    exercise_id INT,
    user_id INT,
    submission_date TIMESTAMP,
    success BOOLEAN,
    FOREIGN KEY (exercise_id) REFERENCES exercises(exercise_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


CREATE TABLE ex_users (
    exercise_id INT,
    user_id INT,
    speed INT,
    done BOOLEAN,
    success BOOLEAN,
    PRIMARY KEY (exercise_id, user_id),
    FOREIGN KEY (exercise_id) REFERENCES exercises(exercise_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE TABLE exercise_content (
    exercise_id INT PRIMARY KEY,
    content TEXT,
    FOREIGN KEY (exercise_id) REFERENCES exercises(exercise_id)
);
INSERT INTO users (name, email, password)
VALUES
    ('John Doe', 'john.doe@example.com', 'password123'),
    ('Jane Smith', 'jane.smith@example.com', 'securepass'),
    ('Alice Johnson', 'alice.johnson@example.com', 'pass123'),
    ('Bob Williams', 'bob.williams@example.com', 'secret'),
    ('Eva Davis', 'eva.davis@example.com', 'letmein'),
    ('Charlie Brown', 'charlie.brown@example.com', 'brownie'),
    ('Olivia Miller', 'olivia.miller@example.com', 'password456'),
    ('Daniel White', 'daniel.white@example.com', 'dannyboy'),
    ('Sophia Lee', 'sophia.lee@example.com', 'sophie123'),
    ('Michael Turner', 'michael.turner@example.com', 'mikepass');




INSERT INTO exercises (name, category, difficulty)
VALUES
    ('Bubble Sort', 'Algorithms', 'Easy'),
    ('Database Normalization', 'Database', 'Medium'),
    ('Quick Sort', 'Algorithms', 'Medium'),
    ('Entity-Relationship Diagrams', 'Database', 'Easy'),
    ('Dijkstras Algorithm', 'Algorithms', 'Hard'),
    ('SQL Joins', 'Database', 'Medium'),
    ('Binary Search', 'Algorithms', 'Easy'),
    ('Transaction Management', 'Database', 'Hard'),
    ('Dynamic Programming', 'Algorithms', 'Hard'),
    ('Indexing in Databases', 'Database', 'Medium');

INSERT INTO ex_users (exercise_id, user_id, speed, done, success)
VALUES
    (1, 7, 18, true, true),
    (2, 8, 12, true, false),
    (3, 9, 28, true, true),
    (4, 10, 10, true, true),
    (5, 1, 5, false, false),
    (6, 2, 22, true, false),
    (7, 3, 7, true, true),
    (8, 4, 19, true, false),
    (9, 5, 15, false, false),
    (10, 6, 30, true, true),
    (1, 9, 25, true, true),
    (2, 10, 8, true, false),
    (5, 3, 20, true, true),
    (6, 4, 10, true, false),
    (7, 5, 0, false, false),
    (8, 6, 30, true, true),
    (10, 8, 5, true, false),
    (1, 3, 3, true, true),
    (2, 4, 4, true, false),
    (4, 6, 15, true, false),
    (5, 7, 7, true, true),
    (6, 8, 20, true, true),
    (7, 9, 10, true, false),
    (9, 1, 30, true, true),
    (10, 2, 22, true, true),
    (1, 4, 18, true, true),
    (2, 5, 12, true, false),
    (3, 6, 28, true, true),
    (4, 7, 10, true, true),
    (5, 8, 5, false, false),
    (6, 9, 22, true, false),
    (7, 10, 7, true, true),
    (8, 1, 19, true, false),
    (9, 2, 15, false, false),
    (10, 3, 30, true, true),
    (1, 6, 25, true, true),
    (2, 7, 8, true, false),
    (3, 8, 0, false, false),
    (4, 9, 12, true, true),
    (5, 10, 20, true, true),
    (6, 1, 10, true, false),
    (7, 2, 0, false, false),
    (8, 3, 30, true, true),
    (9, 4, 22, true, true),
    (10, 5, 5, true, false),
    (1, 8, 3, true, true),
    (2, 9, 4, true, false),
    (3, 10, 25, true, true),
    (5, 2, 7, true, true),
    (6, 3, 20, true, true),
    (7, 4, 10, true, false),
    (8, 5, 0, false, false),
    (9, 6, 30, true, true),
    (10, 7, 22, true, true);


	 
INSERT INTO exercise_content (exercise_id, content)
VALUES
    (1, 'Implement the Bubble Sort algorithm in your preferred programming language.'),
    (2, 'Explain the process of normalizing a relational database.'),
    (3, 'Write a program to implement the Quick Sort algorithm.'),
    (4, 'Create an Entity-Relationship Diagram for a given scenario.'),
    (5, 'Implement Dijkstra\s Algorithm for finding the shortest path in a graph.'),
    (6, 'Write SQL queries demonstrating various types of joins.'),
    (7, 'Implement the Binary Search algorithm in a programming language of your choice.'),
    (8, 'Discuss the importance of transaction management in databases.'),
    (9, 'Solve a dynamic programming problem and explain the approach.'),
    (10, 'Explain the concept of indexing and its significance in databases.');

   DO $$
DECLARE
    i INT := 0;
    random_date TIMESTAMP;
    random_exercise_id INT;
    random_user_id INT;
    random_success BOOLEAN;
BEGIN
    FOR i IN 1..100 LOOP
        -- Losowanie daty z ostatnich 10 miesiÄ™cy
        random_date := NOW() - INTERVAL '1 day' * ROUND(RANDOM() * 300);
        -- Losowanie exercise_id (zakres 1-10)
        random_exercise_id := TRUNC(RANDOM() * 9 + 1)::INT;
        -- Losowanie user_id (zakres 1-11)
        random_user_id := TRUNC(RANDOM() * 10 + 1)::INT;
        -- Losowy sukces (true/false)
        random_success := RANDOM() < 0.5;

        INSERT INTO submissions_history (exercise_id, user_id, submission_date, success)
        VALUES (random_exercise_id, random_user_id, random_date, random_success);
    END LOOP;
END $$;

ALTER TABLE users
ADD COLUMN private BOOLEAN,
ADD COLUMN description VARCHAR(255);

UPDATE users
SET private = false
WHERE private IS NULL;

-- Add new column
ALTER TABLE exercises
ADD COLUMN date_added date;

-- Set a random date in 2023 for existing records
UPDATE exercises
SET date_added = DATE '2023-01-01' + (floor(random() * 365)::int);

-- Add new column
ALTER TABLE users
ADD COLUMN last_login date;

-- Set a random date in 2023 for existing records
UPDATE users

SET last_login = DATE '2023-01-01' + (floor(random() * 365)::int);

ALTER TABLE users
ALTER COLUMN private SET DATA TYPE BOOLEAN,
ALTER COLUMN private SET NOT NULL;

